Previous code:
def average_slope_intercept(image, lines):
    left_fit    = []
    right_fit   = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0: # y is reversed in image
                left_fit.append((slope, intercept))
            else:
                right_fit.append((slope, intercept))
    # add more weight to longer lines
    left_fit_average  = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line  = make_points(image, left_fit_average)
    right_line = make_points(image, right_fit_average)
    averaged_lines = [left_line, right_line]
    return averaged_lines
    
    TypeError                                 Traceback (most recent call last)
Input In [9], in <cell line: 4>()
      2 cropped_image = region_of_interest(canny_image)
      3 lines = cv2.HoughLinesP(cropped_image,2,np.pi/180,100,np.array([]),minLineLength = 40,maxLineGap = 5)
----> 4 averaged_lines = average_slope_intercept(lane_image, lines)
      5 line_image = display_lines(lane_image,averaged_lines)
      6 mix_image = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)

Input In [3], in average_slope_intercept(lane_image, lines)
     14 left_fit_average = np.average(left_fit,axis = 0)
     15 right_fit_average = np.average(right_fit,axis = 0)
---> 17 left_line = make_coordinates(lane_image,left_fit_average)
     18 right_line = make_coordinates(lane_image, right_fit_average)
     20 return np.array([left_line, right_line])

Input In [2], in make_coordinates(lane_image, line_parameters)
      1 def make_coordinates(lane_image, line_parameters):
----> 2     slope, intercept = line_parameters
      3     y1 = lane_image.shape[0]
      4     y2 = int(y1*(3/5))

TypeError: cannot unpack non-iterable numpy.float64 object


Solution:
The error occurs in the make_coordinates function when attempting to unpack the line_parameters variable,
which is a numpy.float64 object, into the slope and intercept variables. 
Since numpy.float64 objects are not iterable, the unpacking operation fails and raises a TypeError.

To fix this error, you can modify the average_slope_intercept function to ensure that it only returns valid lines with slope and intercept values.
One way to do this is to filter out any lines that have a slope of zero or an infinite slope.
Modified Code:
def average_slope_intercept(lane_image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        intercept = parameters[1]
        if slope < 0:
            left_fit.append((slope, intercept))
        elif slope > 0:
            right_fit.append((slope, intercept))
    if len(left_fit) > 0 and len(right_fit) > 0:
        left_fit_average = np.average(left_fit, axis=0)
        right_fit_average = np.average(right_fit, axis=0)
        left_line = make_coordinates(lane_image, left_fit_average)
        right_line = make_coordinates(lane_image, right_fit_average)
        return np.array([left_line, right_line])
    else:
        return None
